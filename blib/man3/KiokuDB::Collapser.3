.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.10)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "KiokuDB::Collapser 3"
.TH KiokuDB::Collapser 3 "2010-03-18" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
KiokuDB::Collapser \- Collapse object hierarchies to entry
data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # mostly internal
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The collapser simplifies real objects into KiokuDB::Entry objects to pass to
the backend.
.PP
Non object data is collapsed by walking it with Data::Visitor (which
KiokuDB::Collapser inherits from).
.PP
Object collapsing is detailed in \*(L"\s-1COLLAPSING\s0 \s-1STRATEGIES\s0\*(R".
.PP
The object's data will be copied into the KiokuDB::Entry with references to
other data structures translated into KiokuDB::Reference objects.
.PP
Reference addresses are mapped to unique identifiers, which are generated as
necessary.
.SS "Compacting"
.IX Subsection "Compacting"
If \f(CW\*(C`compact\*(C'\fR is disabled then every reference is symbolic, and every data
structure has an entry.
.PP
If compacting is enabled (the default) the minimum number of entry objects
required for consistency is created.
.PP
Every blessed, shared or tied data structure requires an entry object, as does
every target of a weak reference. \*(L"Simple\*(R" structures, such as plain
hashes/arrays will be left inline as data intrinsic to the object it was found in.
.PP
Compacting is usually desirable, but sometimes isn't (for instance with an \s-1RDF\s0
like store).
.SH "COLLAPSING STRATEGIES"
.IX Header "COLLAPSING STRATEGIES"
Collapsing strategies are chosen based on the type of the object being
collapsed, using KiokuDB::TypeMap::Resolver.
.PP
The resolver consults the typemap (KiokuDB::TypeMap), and caches the results
as keyed by \f(CW\*(C`ref $object\*(C'\fR.
.PP
The typemap contains normal entries (keyed by \f(CW\*(C`ref $object eq $class\*(C'\fR) or isa
entries (filtered by \f(CW\*(C`$object\->isa($class)\*(C'\fR). The rationale is that a typemap
entry for a superclass might not support all subclasses as well.
.PP
Any strategy may be collapsed as a first class object, or intrinsicly, inside
its parent (in which case it isn't assigned a \s-1UUID\s0). This is determined based
on the \f(CW\*(C`intrinsic\*(C'\fR attribute to the entry. For instance, if Path::Class
related objects should be collapsed as if they are values, the following
typemap entry can be used:
.PP
.Vb 7
\&    isa_entries => {
\&        \*(AqPath::Class::Entity\*(Aq => KiokuDB::TypeMap::Entry::Callback\->new(
\&            intrinsic => 1,
\&            collapse  => "stringify",
\&            expand    => "new",
\&        ),
\&    },
.Ve
.PP
If no typemap entry exists, KiokuDB::TypeMap::Entry::MOP is used by default.
See KiokuDB::TypeMap::Resolver for more details.
.PP
These are the strategies in brief:
.SS "\s-1MOP\s0"
.IX Subsection "MOP"
When the object has a Class::MOP registered metaclass (any Moose object,
but not only), the \s-1MOP\s0 is used to walk the object's attributes and construct
the simplified version without breaking encapsulation.
.PP
See KiokuDB::TypeMap::Entry::MOP.
.SS "Naive"
.IX Subsection "Naive"
This collapsing strategy simply walks the object's data using Data::Visitor.
.PP
This allows collapsing of Class::Accessor based objects, for instance, but
should be used with care.
.PP
See KiokuDB::TypeMap::Entry::Naive
.SS "Callback"
.IX Subsection "Callback"
This collapsing strategy allows callbacks to be used to map the types.
.PP
It is more limited than the other strategies, but very convenient for simple
values.
.PP
See KiokuDB::TypeMap::Entry::Callback for more details.
.SS "Passthrough"
.IX Subsection "Passthrough"
This delegates collapsing to the backend serialization. This is convenient for
when a backend uses e.g. Storable to serialize entries, and the object in
question already has a \f(CW\*(C`STORABLE_freeze\*(C'\fR and \f(CW\*(C`STORABLE_thaw\*(C'\fR method.
