.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.10)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "KiokuDB::TypeMap::Entry::MOP 3"
.TH KiokuDB::TypeMap::Entry::MOP 3 "2010-02-23" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
KiokuDB::TypeMap::Entry::MOP \- A KiokuDB::TypeMap entry for objects with a
metaclass.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    KiokuDB::TypeMap\->new(
\&        entries => {
\&            \*(AqMy::Class\*(Aq => KiokuDB::TypeMap::Entry::MOP\->new(
\&                intrinsic => 1,
\&            ),
\&        },
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This typemap entry handles collapsing and expanding of Moose based objects.
.PP
It supports anonymous classes with runtime roles, the KiokuDB::Role::ID role.
.PP
Code for immutable classes is cached and performs several orders of magnitude
better, so make use of \*(L"make_immutable\*(R" in Moose::Meta::Class.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.IP "intrinsic" 4
.IX Item "intrinsic"
If true the object will be collapsed as part of its parent, without an \s-1ID\s0.
.IP "check_class_versions" 4
.IX Item "check_class_versions"
If true (the default) then class versions will be checked on load and if there
is a mismatch between the stored version number and the current version number,
the version upgrade handler tables will be used to convert the out of date
entry.
.IP "version_table" 4
.IX Item "version_table"
.PD 0
.IP "class_version_table" 4
.IX Item "class_version_table"
.PD
Tables of handlers.
.Sp
See also KiokuDB::Role::Upgrade::Data and
KiokuDB::Role::Upgrade::Handlers::Table for convenience roles that do not
require a central table.
.Sp
The first is a global version table (useful when the typemap entry is only
handling one class) and the second is a table of tables keyed by the class name.
.Sp
The tables are keyed by version number (as a string, \f(CW\*(C`undef\*(C'\fR and \f(CW""\fR are
considered the same), and the value can be either a code reference that
processes the entry to bring it up to date, a hash reference of overridden
fields, or a string denoting a version number that this version is equivalent
to.
.Sp
Version numbers have no actual ordinal meaning, they are taken as simple string
identifiers.
.Sp
If we had 3 versions, \f(CW1.0\fR, \f(CW1.1\fR and \f(CW2.0\fR, where \f(CW1.1\fR is a minor update
to the class that requires no structural changes from \f(CW1.0\fR, our table could
be written like this:
.Sp
.Vb 4
\&    {
\&        \*(Aq1.0\*(Aq => \*(Aq1.1\*(Aq, # upgrading the data from 1.0 to 1.1 is a noop
\&        \*(Aq1.1\*(Aq => sub {
\&            my ( $self, %args ) = @_;
\&
\&            # manually convert the entry data
\&            return $entry\->clone(
\&                class_version => \*(Aq2.0\*(Aq,
\&                prev => $entry,
\&                data => ...,
\&            ),
\&        },
\&    }
.Ve
.Sp
When an object that was stored as version \f(CW1.0\fR is retrieved from the
database, and the current definition of the class has \f(CW$VERSION\fR \f(CW2.0\fR,
table declares \f(CW1.0\fR is the same as \f(CW1.1\fR, so we search for the handler for
\&\f(CW1.1\fR and apply it.
.Sp
The resulting class has the version \f(CW2.0\fR which is the same as what we have
now, so this object can be thawed.
.Sp
The callback is invoked with the following arguments:
.RS 4
.IP "entry" 4
.IX Item "entry"
The entry to upgrade.
.IP "from_version" 4
.IX Item "from_version"
The key under which the handler was found (not necessarily the same as
\&\f(CW\*(C`$entry\->class_version\*(C'\fR).
.IP "meta" 4
.IX Item "meta"
The Class::MOP::Class of the entry's class.
.IP "linker" 4
.IX Item "linker"
The KiokuDB::Linker instance that is inflating this object.
.Sp
Can be used to retrieve additional required objects (cycles are not a problem
but be aware that the objects might not be usable yet at the time of the
callback's invocation).
.RE
.RS 4
.Sp
When a hash is provided as a handler it'll be used to create an entry like
this:
.Sp
.Vb 7
\&    $entry\->derive(
\&        %$handler,
\&        data => {
\&            %{ $entry\->data },
\&            %{ $handler\->{data} || {} },
\&        },
\&    );
.Ve
.Sp
The field \f(CW\*(C`class_version\*(C'\fR is required, and \f(CW\*(C`data\*(C'\fR must contain a hash:
.Sp
.Vb 12
\&    KiokuDB\->connect(
\&        class_version_table => {
\&            Foo => {
\&                "0.02" => {
\&                    class_version => "0.03", # upgrade 0.02 to 0.03
\&                    data => {
\&                        a_new_field => "default_value",
\&                    },
\&                },
\&            },
\&        },
\&    );
.Ve
.RE
.IP "write_upgrades" 4
.IX Item "write_upgrades"
If true, after applying version upgrade handlers, the updated entry will be
written back to the database.
.Sp
Defaults to false but might default to true in future versions (unless the
database is in readonly mode).
